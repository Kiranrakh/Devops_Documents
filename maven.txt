pom.xml: A Project Object Model or POM is the fundamental unit of work in Maven. 
It is an XML file that contains information about the project and configuration details used by Maven to build the project.

Maven Build Lifecycle 
The Maven build follows a specific lifecycle to deploy and distribute the target project.

There are three built-in lifecycles:

default: the main lifecycle, as it's responsible for project deployment
clean: to clean the project and remove all files generated by the previous build
site: to create the project's site documentation
Each lifecycle consists of a sequence of phases. The default build lifecycle consists of 23 phases, as it's the main build lifecycle.


Maven Phase
A Maven phase represents a stage in the Maven build lifecycle. 
Each phase is responsible for a specific task.

Here are some of the most important phases in the default build lifecycle:

validate: check if all information necessary for the build is available
compile: compile the source code
test-compile: compile the test source code
test: run unit tests
package: package compiled source code into the distributable format (jar, war, …)
integration-test: process and deploy the package if needed to run integration tests
install: install the package to a local repository 
deploy: copy the package to the remote repository (example Nexus)
For the full list of each lifecycle's phases, check out the Maven Reference.

Phases are executed in a specific order. This means that if we run a specific phase using the command:

mvn <PHASE>
It won't only execute the specified phase, but all the preceding phases as well.

For example, if we run the deploy phase, which is the last phase in the default build lifecycle, it'll execute all the phases before the deploy phase as well, which is the entire default lifecycle:

mvn deploy

Maven Goal: 
Each phase is a sequence of goals, and each goal is responsible for a specific task.

When we run a phase, all goals bound to this phase are executed in order.

Here are some of the phases and default goals bound to them:

compiler:compile – the compile goal from the compiler plugin is bound to the compile phase
compiler:testCompile is bound to the test-compile phase
surefire:test is bound to the test phase
install:install is bound to the install phase
jar:jar and war:war is bound to the package phase
We can list all goals bound to a specific phase and their plugins using the command:

mvn help:describe -Dcmd=PHASENAME
For example, to list all goals bound to the compile phase, we can run:

mvn help:describe -Dcmd=compile
Then we'd get the sample output:

compile' is a phase corresponding to this plugin:
org.apache.maven.plugins:maven-compiler-plugin:3.1:compile
As mentioned above, this means the compile goal from the compiler plugin is bound to the compile phase.

Building a Maven Project
To build a Maven project, we need to execute one of the lifecycles by running one of their phases:

mvn deploy
This will execute the entire default lifecycle. Alternatively, we can stop at the install phase:

mvn install
But usually, we'll clean the project first by running the clean lifecycle before the new build:

mvn clean install
We can also run only a specific goal of the plugin:

mvn compiler:compile
Note that if we try to build a Maven project without specifying a phase or goal, we'll get an error:

[ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal

git URL for application:

https://github.com/lakshmiprasad2019/myweb.git

[root@ip-172-31-40-45 ~]# update-alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.20.0.8-1.amzn2.0.1.x86_64/bin/java)
*  2           /usr/lib/jvm/java-17-amazon-corretto.x86_64/bin/java
 + 3           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.382.b05-1.amzn2.0.1.x86_64/jre/bin/java)

Enter to keep the current selection[+], or type selection number:

Installation:
yum install -y java-1.8.0-openjdk-devel.x86_64  to install java 8
or 
yum install java-1.8.0
sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y apache-maven



sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
6 sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
7 sudo yum install -y apache-maven

sudo amazon-linux-extras install java-openjdk11